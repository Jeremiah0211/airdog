<mx:TitleWindow
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:controls="flexunit.flexui.controls.*"
	title="Jaktprøve"
	creationComplete="init()"
	layout="vertical">
	
	<mx:Script>
		<![CDATA[
			import no.airdog.controller.*;
			import no.airdog.model.Hund;
			import no.airdog.model.Jaktprove;
			import no.airdog.model.Person;      
			import no.airdog.services.Components;
			import mx.collections.ArrayCollection;
            import mx.controls.Alert;
			import mx.events.ValidationResultEvent;
			import mx.formatters.DateFormatter;
			import mx.utils.StringUtil;
			import mx.validators.DateValidator;
			import mx.validators.NumberValidator;
			import mx.validators.StringValidator;
			import mx.validators.Validator;
			
			[Bindable]public var erGodkjent:Boolean = true;
            [Bindable]public var erTilbakestillt:Boolean = true;
            [Bindable]public var erDommerId1Korrekt:Boolean = false;
            [Bindable]public var erDommerId2Korrekt:Boolean = false;
            [Bindable]public var erHundIdKorrekt:Boolean = false;
    		
    		[Bindable]private var premier:ArrayCollection = new ArrayCollection(
                [ {label:"Ingen"}, 
                  {label:"CK"}, 
                  {label:"CERT"},
                  {label:"CACIT"},
                  {label:"ResCacit"},
                  {label:"ÆP Skog"} ]);
                  
            [Bindable]private var klasser:ArrayCollection = new ArrayCollection(
                [ {label:"UK"}, 
                  {label:"AK"}, 
                  {label:"UK/AK"},
                  {label:"VK"},
                  {label:"VK Semi"},
                  {label:"VK Finale"},
                  {label:"UK Kvalik"},
                  {label:"UKK Finale"},
                  {label:"Derby Kvalik"},
                  {label:"Derby Semi"},
                  {label:"Derby Finale"} ]);
    
            private var hvilkeKontroll:DisplayObject;
            
            private var proveNrValidator:StringValidator = new StringValidator();
            private var proveDatoValidator:DateValidator = new DateValidator();
            
            private var jaktlystValidator:NumberValidator = new NumberValidator();
            private var fartValidator:NumberValidator = new NumberValidator();
            private var stilValidator:NumberValidator = new NumberValidator();
            private var selvstendighetValidator:NumberValidator = new NumberValidator();
            private var breddeValidator:NumberValidator = new NumberValidator();
            private var revieringValidator:NumberValidator = new NumberValidator();
            private var samarbeidValidator:NumberValidator = new NumberValidator();
            
            private var slippTidValidator:NumberValidator = new NumberValidator();
            private var egneStandValidator:NumberValidator = new NumberValidator();
            private var egneStokkValidator:NumberValidator = new NumberValidator();
            private var tomStandValidator:NumberValidator = new NumberValidator();
            private var makkerStandValidator:NumberValidator = new NumberValidator();
            private var makkerStokkValidator:NumberValidator = new NumberValidator();
            
            private var partiNrValidator:StringValidator = new StringValidator();
            private var hundIdValidator:StringValidator = new StringValidator();
            
            private var presUpresisValidator:NumberValidator = new NumberValidator();
            private var presNoeUpresisValidator:NumberValidator = new NumberValidator();
            private var presPresisValidator:NumberValidator = new NumberValidator();
            
            private var reisNekterValidator:NumberValidator = new NumberValidator();
            private var reisNoelendeValidator:NumberValidator = new NumberValidator();
            private var reisVilligValidator:NumberValidator = new NumberValidator();
            private var reisDjervValidator:NumberValidator = new NumberValidator();
            
            private var sokStjelerValidator:NumberValidator = new NumberValidator();
            private var sokSpontantValidator:NumberValidator = new NumberValidator();
            
            private var appIkkeGodkjentValidator:NumberValidator = new NumberValidator();
            private var appGodkjentValidator:NumberValidator = new NumberValidator();
            
            private var rappInnkaltValidator:NumberValidator = new NumberValidator();
            private var rappSpontValidator:NumberValidator = new NumberValidator();
			
			private function init():void
            {
            	settFokus();
             	settValidatorer();
             	settToolTips();
             	tilbakestillForm();
         	}
         	
         	private function settFokus():void
            {
                focusManager.setFocus(kritikk);
            }
			
            private function validering(event:Event):void 
            {                    
                hvilkeKontroll = event.target as DisplayObject;
                var likTest:Boolean = sammenliknObjekt(formVerdier(), Components.instance.session.jaktprove);
                
                if((Components.instance.session.jaktprove != null) && !likTest)
             	{
            		var df:DateFormatter = new DateFormatter();
					df.formatString = "YYYY-MM-DD";
					
					manueltEndretAv.text = Components.instance.session.bruker.epost
             		manueltEndretDato.text = df.format(new Date());
             		
             		erTilbakestillt = false;
             	}
             	
             	if(likTest)
             	{
             		erTilbakestillt = true;
             	}
             	
             	erGodkjent = true;

                valider(proveNrValidator);                
                valider(proveDatoValidator);
                valider(partiNrValidator);
                
                valider(jaktlystValidator);
                valider(fartValidator);
                valider(stilValidator);
                valider(selvstendighetValidator);
                valider(breddeValidator);
                valider(revieringValidator);
                valider(samarbeidValidator);
                
                valider(slippTidValidator);
                valider(egneStandValidator);
            	valider(egneStokkValidator);
            	valider(tomStandValidator);
            	valider(makkerStandValidator);
            	valider(makkerStokkValidator);
            	
	            valider(partiNrValidator);
	            valider(hundIdValidator);
	            
	            valider(presUpresisValidator);
	            valider(presNoeUpresisValidator);
	            valider(presPresisValidator);
	            
	            valider(reisNekterValidator);
	            valider(reisNoelendeValidator);
	            valider(reisVilligValidator);
	            valider(reisDjervValidator);
	            
	            valider(sokStjelerValidator);
	            valider(sokSpontantValidator);
	            
	            valider(appIkkeGodkjentValidator);
	            valider(appGodkjentValidator);
	            
	            valider(rappInnkaltValidator);
	            valider(rappSpontValidator);
            }
            
            private function sammenliknObjekt(objekt1:Object,objekt2:Object):Boolean
			{
			    var buffer1:ByteArray = new ByteArray();
			    buffer1.writeObject(objekt1);
			    var buffer2:ByteArray = new ByteArray();
			    buffer2.writeObject(objekt2);
			 	
			    var storrelse:uint = buffer1.length;
			    if (buffer1.length == buffer2.length)
			    {
			        buffer1.position = 0;
			        buffer2.position = 0;
			 
			        while (buffer1.position < storrelse)
			        {
			            var v1:int = buffer1.readByte();
			            if (v1 != buffer2.readByte())
			            {
			                return false;
			            }
			        }    
			        return true;                        
			    }
			    return false;
			}
            
            private function valider(validerer:Validator):Boolean
            {                
	            var validatoren:DisplayObject = validerer.source as DisplayObject;
	            var ikkeVisBoks:Boolean = (validatoren != hvilkeKontroll);
	            var event:ValidationResultEvent = validerer.validate(null, ikkeVisBoks); 
	            var erValidert:Boolean = (event.type == ValidationResultEvent.VALID);
	            
	            erGodkjent = erGodkjent && erValidert;
	             
	            return erValidert;
             } 
             
             private function settToolTips():void
             {
             	jaktlyst.toolTip = 
             		"1. Meget lav intensitet\n" + 
             		"2. Lav intensitet\n" + 
             		"3. Middels intensitet\n" + 
             		"4. God intensitet\n" + 
             		"5. Meget god intensitet\n" + 
             		"6. Særdeles god intensitet (best)";
             		
             	fart.toolTip =
             		"1. Meget lav fart\n" + 
             		"2. Lav fart\n" + 
             		"3. Middels fart\n" + 
             		"4. God fart\n" + 
             		"5. Meget god fart\n" + 
             		"6. Særdeles høy fart (best)";
             		
             	stil.toolTip =
             		"1. Meget dårlig stil\n" + 
             		"2. Dårlig stil\n" + 
             		"3. Bra stil\n" + 
             		"4. Fin stil\n" + 
             		"5. Meget fin stil\n" + 
             		"6. Særdeles fin stil (best)";
             		
             	selvstendighet.toolTip =
             		"1. Helt avhengig av makker\n" + 
             		"2. Meget avhengig av makker\n" + 
             		"3. Noe avhengig av makker\n" + 
             		"4. Tendenser til avhengighet\n" + 
             		"5. Stort sett selvstendig\n" + 
             		"6. Helt selvstendig (best)";
             		
             	bredde.toolTip = 
             		"1. Altfor liten søkebredde\n" + 
             		"2. Moderat søkebredde\n" + 
             		"3. God søkebredde\n" + 
             		"4. Meget god søkebredde (best)\n" + 
             		"5. Litt for stor søkebredde\n" + 
             		"6. Altfor stor søkebredde";
             		
             	reviering.toolTip = 
             		"1. Planløst, uten framdrift\n" + 
             		"2. Altfor tett reviering\n" + 
             		"3. Noe for tett reviering\n" + 
             		"4. Utmerket reviering (best)\n" + 
             		"5. Noe åpen reviering\n" + 
             		"6. Altfor åpen reviering";
             		
             	samarbeid.toolTip =
             		"1. Totalt førerfiksert\n" + 
             		"2. Noe bundet til fører\n" + 
             		"3. Bra samarbeid\n" + 
             		"4. Utmerket samarbeid (best)\n" + 
             		"5. Noe egenrådig\n" + 
             		"6. Samarbeider ikke";
             		
             	var presisjonTip:String =
             		"PRESISJON\n" + 
             		"Antalle fuglearbeider i hver presisjonskategori inklusive fuglearbeid på gjenliggere. " + 
             		"Noteres for alle fuglearbeider.";
             		
             	presUpresis.toolTip = presisjonTip;
             	presNoeUpresis.toolTip = presisjonTip;
             	presPresis.toolTip = presisjonTip;
             	
             	var reisingTip:String =
             		"REISING\n" + 
             		"Antall fuglearbeider i hver reisingskategori inklusive fuglearbeid på gjenliggere.";
             	
             	reisNekter.toolTip = reisingTip;
             	reisNoelende.toolTip = reisingTip;
             	reisVillig.toolTip = reisingTip;
             	reisDjerv.toolTip = reisingTip;
             	
             	var sekunderingTip:String =
             		"SEKUNDERING\n" + 
             		"Stjeler = Antall situasjoner der hunden ikke respekterer makkers stand.\n" + 
             		"Spontan = Antall tilfeller der hunden sekunderer spontant uten kommando fra fører.";
             		
             	sokStjeler.toolTip = sekunderingTip;
             	sokSpontant.toolTip = sekunderingTip;
             		
             	var apportTip:String =
             		"APPORT\n" + 
             		"Antall godkjente, henholdsvis ikke godkjente apporter.";
             		
             	appIkkeGodkjent.toolTip = apportTip;
             	appGodkjent.toolTip = apportTip;
             		
             	var adferdTip:String =
             		"ADFERD\n" + 
             		"Bedømmes ved aggressivitet i forhold til mennesker eller hunder.";
             }
             
             private function settValidatorer():void
             {
             	var krevd:String = "Feltet er påkrevd";
             	var negativ:String = "Skriv et positivt tall";
             	
             	proveNrValidator.source = proveNr;
             	proveNrValidator.minLength = 2;
             	proveNrValidator.property = "text";
             	proveNrValidator.tooShortError = "Du må skrive minst " + proveNrValidator.minLength + " tegn";
             	
				proveDatoValidator.source = proveDato;
				proveDatoValidator.property ="text";
				proveDatoValidator.inputFormat ="YYYY-MM-DD";
				proveDatoValidator.allowedFormatChars = "-";
             	proveDatoValidator.formatError = "Feil datoformatering"
			    proveDatoValidator.invalidCharError = "Det er kun lov å bruke bindestrek (-) som skilletegn"
			    proveDatoValidator.wrongDayError = "Skriv inn riktig dag for måneden"
			    proveDatoValidator.wrongLengthError="Feil formatering"
			    proveDatoValidator.wrongMonthError="Skriv en måned mellom 1 og 12"
			   	proveDatoValidator.wrongYearError="Skriv år mellom 0 og 9999."
			   	
			   	jaktlystValidator.source = jaktlyst;
			   	jaktlystValidator.minValue = 1;
			   	jaktlystValidator.maxValue = 6;
			   	jaktlystValidator.property = "text";
			   	jaktlystValidator.requiredFieldError = krevd;
			   	jaktlystValidator.lowerThanMinError = "Verdien må være mellom " + jaktlystValidator.minValue + " og " + jaktlystValidator.maxValue;
			   	jaktlystValidator.exceedsMaxError = jaktlystValidator.lowerThanMinError;
			   	
			   	fartValidator.source = fart;
			   	fartValidator.minValue = 1;
			   	fartValidator.maxValue = 6;
			   	fartValidator.property = "text";
    			fartValidator.requiredFieldError = krevd;
    			fartValidator.lowerThanMinError = "Verdien må være mellom " + fartValidator.minValue + " og " + fartValidator.maxValue;
			   	fartValidator.exceedsMaxError = fartValidator.lowerThanMinError;
			   	
			   	stilValidator.source = stil;
			   	stilValidator.minValue = 1;
			   	stilValidator.maxValue = 6;
			   	stilValidator.property = "text";
    			stilValidator.requiredFieldError = krevd;
    			stilValidator.lowerThanMinError = "Verdien må være mellom " + stilValidator.minValue + " og " + stilValidator.maxValue;
			   	stilValidator.exceedsMaxError = stilValidator.lowerThanMinError;
			   	
			   	selvstendighetValidator.source = selvstendighet;
			   	selvstendighetValidator.minValue = 1;
			   	selvstendighetValidator.maxValue = 6;
			   	selvstendighetValidator.property = "text";
    			selvstendighetValidator.requiredFieldError = krevd;
    			selvstendighetValidator.lowerThanMinError = "Verdien må være mellom " + selvstendighetValidator.minValue + " og " + selvstendighetValidator.maxValue;
			   	selvstendighetValidator.exceedsMaxError = selvstendighetValidator.lowerThanMinError;
			   	
			   	breddeValidator.source = bredde;
			   	breddeValidator.minValue = 1;
			   	breddeValidator.maxValue = 6;
			   	breddeValidator.property = "text";
    			breddeValidator.requiredFieldError = krevd;
    			breddeValidator.lowerThanMinError = "Verdien må være mellom " + breddeValidator.minValue + " og " + breddeValidator.maxValue;
			   	breddeValidator.exceedsMaxError = breddeValidator.lowerThanMinError;
			   	
			   	revieringValidator.source = reviering;
			   	revieringValidator.minValue = 1;
			   	revieringValidator.maxValue = 6;
			   	revieringValidator.property = "text";
    			revieringValidator.requiredFieldError = krevd;
    			revieringValidator.lowerThanMinError = "Verdien må være mellom " + revieringValidator.minValue + " og " + revieringValidator.maxValue;
			   	revieringValidator.exceedsMaxError = revieringValidator.lowerThanMinError;
			   	
			   	samarbeidValidator.source = samarbeid;
			   	samarbeidValidator.minValue = 1;
			   	samarbeidValidator.maxValue = 6;
			   	samarbeidValidator.property = "text";
    			samarbeidValidator.requiredFieldError = krevd;
    			samarbeidValidator.lowerThanMinError = "Verdien må være mellom " + samarbeidValidator.minValue + " og " + samarbeidValidator.maxValue;
			   	samarbeidValidator.exceedsMaxError = samarbeidValidator.lowerThanMinError;
			   	
			   	slippTidValidator.source = slippTid;
			   	slippTidValidator.property = "text";
			   	slippTidValidator.required = false;
			   	slippTidValidator.allowNegative = false;
			   	slippTidValidator.negativeError = negativ;
			   	
			   	egneStandValidator.source = egneStand;
			   	egneStandValidator.property = "text";
			   	egneStandValidator.required = false;
			   	egneStandValidator.allowNegative = false;
			   	egneStandValidator.negativeError = negativ;
			   	
			   	egneStokkValidator.source = egneStokk;
			   	egneStokkValidator.property = "text";
			   	egneStokkValidator.required = false;
			   	egneStokkValidator.allowNegative = false;
			   	egneStokkValidator.negativeError = negativ;
			   	
			   	tomStandValidator.source = tomStand;
			   	tomStandValidator.property = "text";
			   	tomStandValidator.required = false;
			   	tomStandValidator.allowNegative = false;
			   	tomStandValidator.negativeError = negativ;
			   	
			   	makkerStandValidator.source = makkerStand;
			   	makkerStandValidator.property = "text";
			   	makkerStandValidator.required = false;
			   	makkerStandValidator.allowNegative = false;
			   	makkerStandValidator.negativeError = negativ;
			   	
			   	makkerStokkValidator.source = makkerStokk;
			   	makkerStokkValidator.property = "text";
			   	makkerStokkValidator.required = false;
			   	makkerStokkValidator.allowNegative = false;
			   	makkerStokkValidator.negativeError = negativ;
	            
	            partiNrValidator.source = partiNr;
			   	partiNrValidator.property = "text"
			   	partiNrValidator.required = false;
			   	
	            hundIdValidator.source = hundId;
			   	hundIdValidator.property = "text"
			   	hundIdValidator.required = false;
	            
	            presUpresisValidator.source = presUpresis;
			   	presUpresisValidator.property = "text"
			   	presUpresisValidator.required = false;
			   	presUpresisValidator.allowNegative = false;
			   	presUpresisValidator.negativeError = negativ;
	            
	            presNoeUpresisValidator.source = presNoeUpresis;
			   	presNoeUpresisValidator.property = "text"
			   	presNoeUpresisValidator.required = false;
			   	presNoeUpresisValidator.allowNegative = false;
			   	presNoeUpresisValidator.negativeError = negativ;
	            
	            presPresisValidator.source = presPresis;
			   	presPresisValidator.property = "text"
			   	presPresisValidator.required = false;
			   	presPresisValidator.allowNegative = false;
			   	presPresisValidator.negativeError = negativ;
	            
	            reisNekterValidator.source = reisNekter;
			   	reisNekterValidator.property = "text"
			   	reisNekterValidator.required = false;
			   	reisNekterValidator.allowNegative = false;
			   	reisNekterValidator.negativeError = negativ;
	            
	            reisNoelendeValidator.source = reisNoelende;
			   	reisNoelendeValidator.property = "text"
			   	reisNoelendeValidator.required = false;
			   	reisNoelendeValidator.allowNegative = false;
			   	reisNoelendeValidator.negativeError = negativ;
	            
	            reisVilligValidator.source = reisVillig;
			   	reisVilligValidator.property = "text"
			   	reisVilligValidator.required = false;
			   	reisVilligValidator.allowNegative = false;
			   	reisVilligValidator.negativeError = negativ;
	            
	            reisDjervValidator.source = reisDjerv;
			   	reisDjervValidator.property = "text"
			   	reisDjervValidator.required = false;
			   	reisDjervValidator.allowNegative = false;
			   	reisDjervValidator.negativeError = negativ;
	            
	            sokStjelerValidator.source = sokStjeler;
			   	sokStjelerValidator.property = "text"
			   	sokStjelerValidator.required = false;
			   	sokStjelerValidator.allowNegative = false;
			   	sokStjelerValidator.negativeError = negativ;
	            
	            sokSpontantValidator.source = sokSpontant;
			   	sokSpontantValidator.property = "text"
			   	sokSpontantValidator.required = false;
			   	sokSpontantValidator.allowNegative = false;
			   	sokSpontantValidator.negativeError = negativ;
	            
	            appIkkeGodkjentValidator.source = appIkkeGodkjent;
			   	appIkkeGodkjentValidator.property = "text"
			   	appIkkeGodkjentValidator.required = false;
			   	appIkkeGodkjentValidator.allowNegative = false;
			   	appIkkeGodkjentValidator.negativeError = negativ;
	            
	            appGodkjentValidator.source = appGodkjent;
			   	appGodkjentValidator.property = "text"
			   	appGodkjentValidator.required = false;
			   	appGodkjentValidator.allowNegative = false;
			   	appGodkjentValidator.negativeError = negativ;
	            
	            rappInnkaltValidator.source = rappInnkalt;
			   	rappInnkaltValidator.property = "text"
			   	rappInnkaltValidator.required = false;
			   	rappInnkaltValidator.allowNegative = false;
			   	rappInnkaltValidator.negativeError = negativ;
			   	
	            rappSpontValidator.source = rappSpont;
			   	rappSpontValidator.property = "text"
			   	rappSpontValidator.required = false;
			   	rappSpontValidator.allowNegative = false;
			   	rappSpontValidator.negativeError = negativ;
			 }
             
			private function formVerdier():Jaktprove
			{
				var prove:Jaktprove = new Jaktprove();
				
				prove.appGodkjent = appGodkjent.text;
				prove.appIkkeGodkjent = appIkkeGodkjent.text;
				prove.bredde = bredde.text;
				prove.certifikat = Components.instance.session.jaktprove.certifikat; // !i ui. wai?
				prove.dommerId1 = dommerId1.text;
				prove.dommerId2 = dommerId2.text;
				prove.egneStand = egneStand.text;
				prove.egneStokk = egneStokk.text;
				prove.fart = fart.text;
				prove.hundId = hundId.text;
				prove.jaktlyst = jaktlyst.text;
				prove.klasse = klasse.selectedIndex + 1;
				prove.kritikk = kritikk.text;
				prove.makkerStand = makkerStand.text;
				prove.makkerStokk = makkerStokk.text;
				prove.manueltEndretAv = manueltEndretAv.text;
				prove.manueltEndretDato = manueltEndretDato.text;
				prove.partiNr = partiNr.text;
				prove.premiegrad = premiegrad.selectedIndex;
				prove.presNoeUpresis = presNoeUpresis.text;
				prove.presPresis = presPresis.text;
				prove.presUpresis = presUpresis.text;
				prove.proveDato = proveDato.text;
				prove.proveNr = proveNr.text;
				prove.rappInnkalt = rappInnkalt.text;
				prove.rappSpont = rappSpont.text;
				prove.raseId = Components.instance.session.jaktprove.raseId; // ikke i ui. skal ikke endres, da hunder ikke endrer rase
				prove.regAv = regAv.text;
				prove.regDato = regDato.text;
				prove.reisDjerv = reisDjerv.text;
				prove.reisNekter = reisNekter.text;
				prove.reisNoelende = reisNoelende.text;
				prove.reisVillig = reisVillig.text;
				prove.reviering = reviering.text;
				prove.samarbeid = samarbeid.text;
				prove.selvstendighet = selvstendighet.text;
				prove.slippTid = slippTid.text;
				prove.sokSpontant = sokSpontant.text;
				prove.sokStjeler = sokStjeler.text;
				prove.stil = stil.text;
				prove.tomStand = tomStand.text;
				
				return prove;
			}
			            
            private function lagreJaktprove():void 
            {
            	if(Components.instance.session.jaktprove)
            	{
            		Components.instance.controller.redigerJaktprove(formVerdier());
            	}
            	else
            	{
            		Components.instance.controller.leggInnJaktprove(formVerdier());
            	}
            }
            
            private function hundIdSjekk():void
            {
            	if(valider(hundIdValidator))
            	{
            		Components.instance.controller.hentHund(hundId.text, hundIdSjekkResultat);
            	}
            	else
            	{
            		hundIdIkon.source = "no/airdog/view/assets/ikoner/cross_cirle.png";
            	}
            }
            
            private function hundIdSjekkResultat(event:Hund):void
            {
            	if((StringUtil.trim(event.navn) == ""))
            	{
            		hundIdIkon.source = "no/airdog/view/assets/ikoner/cross_circle.png";
            	}
            	else
            	{
            		hundIdIkon.source = "no/airdog/view/assets/ikoner/tick_circle.png";
            	}
            	hundNavn.text = StringUtil.trim(event.navn);
            }
            
            private function dommerId1Sjekk():void
            {
            	Components.instance.controller.hentPerson(dommerId1.text, dommerId1SjekkResultat);
            }
            
            private function dommerId1SjekkResultat(event:Person):void
            {
            	if(StringUtil.trim(event.navn) == "")
            	{
            		dommer1Ikon.source = "no/airdog/view/assets/ikoner/user_silhouette.png";
            		dommer1Label.text = "Ukjent";
            	}
            	else
            	{
            		dommer1Ikon.source = "no/airdog/view/assets/ikoner/user.png";
            		dommer1Label.text = StringUtil.trim(event.navn);
            	}
            }
			
			private function dommerId2Sjekk():void
            {
            	Components.instance.controller.hentPerson(dommerId2.text, dommerId2SjekkResultat);
            }
            
            private function dommerId2SjekkResultat(event:Person):void
            {
            	if(StringUtil.trim(event.navn) == "")
            	{
            		dommer2Ikon.source = "no/airdog/view/assets/ikoner/user_silhouette.png";
            		dommer2Label.text = "Ukjent";
            	}
            	else
            	{
            		dommer2Ikon.source = "no/airdog/view/assets/ikoner/user.png";
            		dommer2Label.text = StringUtil.trim(event.navn);
            	}
            }
            
            private function tilbakestillForm():void
            {
            	appGodkjent.text = Components.instance.session.jaktprove.appGodkjent;
				appIkkeGodkjent.text = Components.instance.session.jaktprove.appIkkeGodkjent;
				bredde.text = Components.instance.session.jaktprove.bredde;
				//certifikat.text = Components.instance.session.jaktprove.certifikat; // !i ui. wai?
				dommerId1.text = Components.instance.session.jaktprove.dommerId1;
				dommerId2.text = Components.instance.session.jaktprove.dommerId2;
				egneStand.text = Components.instance.session.jaktprove.egneStand;
				egneStokk.text = Components.instance.session.jaktprove.egneStokk;
				fart.text = Components.instance.session.jaktprove.fart;
				hundId.text = Components.instance.session.jaktprove.hundId;
				//hundNavn.text settes sammen med ikon i hundIdSjekk();
				jaktlyst.text = Components.instance.session.jaktprove.jaktlyst;
				klasse.selectedIndex = Components.instance.session.jaktprove.klasse - 1;
				kritikk.text = Components.instance.session.jaktprove.kritikk;
				makkerStand.text = Components.instance.session.jaktprove.makkerStand;
				makkerStokk.text = Components.instance.session.jaktprove.makkerStokk;
				manueltEndretAv.text = Components.instance.session.jaktprove.manueltEndretAv;
				manueltEndretDato.text = Components.instance.session.jaktprove.manueltEndretDato;
				partiNr.text = Components.instance.session.jaktprove.partiNr;
				premiegrad.selectedIndex = Components.instance.session.jaktprove.premiegrad;
				presNoeUpresis.text = Components.instance.session.jaktprove.presNoeUpresis;
				presPresis.text = Components.instance.session.jaktprove.presPresis;
				presUpresis.text = Components.instance.session.jaktprove.presUpresis;
				proveDato.text = Components.instance.session.jaktprove.proveDato;
				proveNr.text = Components.instance.session.jaktprove.proveNr;
				rappInnkalt.text = Components.instance.session.jaktprove.rappInnkalt;
				rappSpont.text = Components.instance.session.jaktprove.rappSpont;
				//raseId.text = Components.instance.session.jaktprove.raseId; // ikke i ui. skal ikke endres, da hunder ikke endrer rase
				regAv.text = Components.instance.session.jaktprove.regAv;
				regDato.text = Components.instance.session.jaktprove.regDato;
				reisDjerv.text = Components.instance.session.jaktprove.reisDjerv;
				reisNekter.text = Components.instance.session.jaktprove.reisNekter;
				reisNoelende.text = Components.instance.session.jaktprove.reisNoelende;
				reisVillig.text = Components.instance.session.jaktprove.reisVillig;
				reviering.text = Components.instance.session.jaktprove.reviering;
				samarbeid.text = Components.instance.session.jaktprove.samarbeid;
				selvstendighet.text = Components.instance.session.jaktprove.selvstendighet;
				slippTid.text = Components.instance.session.jaktprove.slippTid;
				sokSpontant.text = Components.instance.session.jaktprove.sokSpontant;
				sokStjeler.text = Components.instance.session.jaktprove.sokStjeler;
				stil.text = Components.instance.session.jaktprove.stil;
				tomStand.text = Components.instance.session.jaktprove.tomStand;
            	
                erTilbakestillt = true;
                
                hundIdSjekk();
                dommerId1Sjekk();
                dommerId2Sjekk();         
            }
            
           	private function avbryt():void
			{
				Components.instance.controller.fjernJaktproveVindu();
			}
        ]]>
    </mx:Script>
	
	<mx:HBox width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" fontSize="11">
		<mx:VBox width="100%" height="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
			<mx:Form id="beskrivelse"  width="100%" height="100%" paddingBottom="0" paddingLeft="0" paddingRight="0">
				<mx:FormHeading label="Kritikk"/>
				<mx:FormItem width="100%" height="100%">
						<mx:TextArea id="kritikk" width="100%" height="100%"/>
				</mx:FormItem>						
			</mx:Form>
			<mx:HBox horizontalAlign="left" horizontalGap="0">
				<mx:Form verticalGap="0">
					<mx:FormHeading label="Prøve"/>
					<mx:FormItem label="Nummer">
						<mx:TextInput id="proveNr" change="validering(event);" width="84" height="20"/>
					</mx:FormItem>					
					<mx:FormItem label="Dato">
						<mx:DateField id="proveDato" editable="false" formatString="YYYY-MM-DD" change="validering(event);" yearNavigationEnabled="true" width="100" height="20"/> 
					</mx:FormItem>
				</mx:Form>
				<mx:Form verticalGap="0">
					<mx:FormHeading label="Dommere"/>
					<mx:FormItem label="1">
						<mx:HBox paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" horizontalGap="0" verticalAlign="middle">
							<mx:TextInput id="dommerId1" focusOut="dommerId1Sjekk();" change="validering(event);" width="84" height="20"/>
							<mx:Image id="dommer1Ikon" width="16" height="16"/>
							<mx:Label id="dommer1Label" width="75" maxWidth="75"/>
						</mx:HBox>
					</mx:FormItem>
					<mx:FormItem label="2">	
						<mx:HBox paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" horizontalGap="0" verticalAlign="middle">		
							<mx:TextInput id="dommerId2" focusOut="dommerId2Sjekk();" change="validering(event);" width="84" height="20"/>
							<mx:Image id="dommer2Ikon" width="16" height="16"/>
							<mx:Label id="dommer2Label" width="75" maxWidth="75"/>
						</mx:HBox>
					</mx:FormItem>
				</mx:Form>
			</mx:HBox>
			
		</mx:VBox>
		
		<mx:HBox paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
			<mx:VBox paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
				<mx:Form verticalGap="0">
					<mx:FormHeading label="Summering" />
					<mx:FormItem label="Slipptid">
						<mx:TextInput id="slippTid" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Egne stand">
						<mx:TextInput id="egneStand" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Egne støkk">
						<mx:TextInput id="egneStokk" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Tomstand">
						<mx:TextInput id="tomStand" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Makkers stand">
						<mx:TextInput id="makkerStand" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Makkers støkk">
						<mx:TextInput id="makkerStokk" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
				</mx:Form>
				<mx:Form verticalGap="0">					
					<mx:FormHeading label="Diverse"/>
					<mx:FormItem label="Klasse">
						<mx:ComboBox id="klasse" change="validering(event);" dataProvider="{klasser}" height="20"/>
					</mx:FormItem>					
					<mx:FormItem label="Partinummer">
						<mx:TextInput id="partiNr" change="validering(event);" width="84" height="20"/>
					</mx:FormItem>
					<!--<mx:FormHeading label="Hundinfo"/>-->
					<mx:FormItem label="Hund-ID">
						<mx:HBox paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" horizontalGap="0" verticalAlign="middle">
							<mx:TextInput id="hundId" focusOut="hundIdSjekk();" change="validering(event);" width="84" height="20"/>
							<mx:Image id="hundIdIkon"/>
						</mx:HBox>
					</mx:FormItem>				
					<mx:FormItem label="Navn">
						<mx:TextInput id="hundNavn" enabled="false" width="84" height="20"/>
					</mx:FormItem>
				
					<!--<mx:FormHeading label="Registrering"/>-->
					<mx:FormItem label="Registert av">
						<mx:TextInput id="regAv" enabled="false" change="validering(event);" width="84" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Dato registrert">
						<mx:TextInput id="regDato" enabled="false" change="validering(event);" width="84" height="20"/>
					</mx:FormItem>
					
					<!--<mx:FormHeading label="Endring"/>-->			
					<mx:FormItem label="Endret av" >
						<mx:TextInput id="manueltEndretAv" enabled="false" width="84" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Dato endret" >
						<mx:TextInput id="manueltEndretDato" enabled="false" width="84" height="20"/>
					</mx:FormItem>					
				</mx:Form>
			</mx:VBox>
			
			<mx:VBox paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
				<mx:Form verticalGap="0">
					<mx:FormHeading label="Karakterer"/>
					<mx:FormItem label="Jaktlyst">
						<mx:TextInput id="jaktlyst" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Fart" >
						<mx:TextInput id="fart" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Stil">
						<mx:TextInput id="stil" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Selvstendighet" >
						<mx:TextInput id="selvstendighet" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Søkebredde" >
						<mx:TextInput id="bredde" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Reviering" >
						<mx:TextInput id="reviering" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Samarbeid" >
						<mx:TextInput id="samarbeid" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>

					<!--<mx:FormHeading label="Presisjon"/>-->
					<mx:FormItem label="Upresis" >
						<mx:TextInput id="presUpresis" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Noe upresis" >
						<mx:TextInput id="presNoeUpresis" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Presis" >
						<mx:TextInput id="presPresis" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>					
				
					<!--<mx:FormHeading label="Reising"/>-->
					<mx:FormItem label="Nekter">
						<mx:TextInput id="reisNekter" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Nølende">
						<mx:TextInput id="reisNoelende" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Villig" >
						<mx:TextInput id="reisVillig" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Djerv">
						<mx:TextInput id="reisDjerv" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					
					<!--<mx:FormHeading label="Sekundering"/>-->
					<mx:FormItem label="Stjeler" >
						<mx:TextInput id="sokStjeler" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Spontan" >
						<mx:TextInput id="sokSpontant" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					
					<!--<mx:FormHeading label="Apport"/>-->
					<mx:FormItem label="Ikke godkjent">
						<mx:TextInput id="appIkkeGodkjent" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Godkjent" >
						<mx:TextInput id="appGodkjent" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					
					<!--<mx:FormHeading label="Rapport"/>-->
					<mx:FormItem label="Innkalt" >
						<mx:TextInput id="rappInnkalt" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					<mx:FormItem label="Spontan">
						<mx:TextInput id="rappSpont" change="validering(event);" width="35" height="20"/>
					</mx:FormItem>
					
					<mx:FormItem label="Premie">
						<mx:ComboBox id="premiegrad" change="validering(event);" dataProvider="{premier}" height="20"/>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
		</mx:HBox>			
	</mx:HBox>
	
	<mx:ControlBar horizontalAlign="center">
        <mx:Button label="Lagre" enabled="{erGodkjent}" click="lagreJaktprove()"/>
        <mx:Button label="Tilbakestill" enabled="{!erTilbakestillt}" click="tilbakestillForm()"/>
        <mx:Button label="Avbryt" click="avbryt()"/>
	</mx:ControlBar>
</mx:TitleWindow>